#+TITLE: Building with private modules

Here I'll test setting up a Go project that can optionally include a private module.

* Questions to answer
** Can this package be built and used without the private module?

Yes.

To determine this, I used a docker container, checked out the repository, and ran make to produce the binary. The tag "private" was not specified, and so the placeholder was used.

** Can this package be built *with* the private module?

Yes.

By specifying the build tag "private" (see Makefile), the private Go module is linked in and used.

** Is it easy to switch between the two?

I'd say so, it's just changes to the ~-tags~ flag to ~go build~. It can be mostly if not entirely automated away behind a Makefile, or other scripts.

** How hard is it to leak details from the private module into this one?

Mostly, I think it comes down to a couple of things:

- What's visible in the caution package?
- What's visible in the go.mod file? (that is, in the private package's path)

Of these, the first is more likely to result in a leak. One will have to use care with the names chosen there.

** Does it work with ~go mode vendor~?

No. This seems to be a sticking point.

#+begin_quote
As with go mod tidy and other module commands, build constraints except for ignore are not considered when constructing the vendor directory.
-- [[https://go.dev/ref/mod#vendoring][Go mod vendor docs]]
#+end_quote

* Other approaches

** [[https://pkg.go.dev/cmd/go#hdr-Build_modes][-buildmode=shared]]

Doesn't appear to be working since Go modules were introduced. Too bad. If it did work, it would probably be a good solution.

#+begin_quote
We've decided to leave -buildmode=shared alone (not delete it) for Go 1.18,
but it's not going to work any better than it does today.
In particular, we're not fixing any bugs in it anymore,
and we still intend to remove it in a future release.
However, I would like to better understand how to serve existing use cases, if that's possible.
-- [[https://github.com/golang/go/issues/47788#issuecomment-954890659][rsc]]
#+end_quote

** Go generate

Could go:generate be used to detect the existence of something, say an ENV value, and pull in one or the other import based on that?

Interestingly, the ~go generate~ command respects the ~-tags~ flag.

Maybe we could implement placeholders in a file with a !private build constraint. In another file with a private build constraint is a go:generate that would... do what exactly? change references from ~internal/pkg/placholder~ to ~real/location/of/dependency~? Isn't there a go tool to do just that? Maybe it wouldn't be that bad.
